//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SimpraLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
internal partial class SimpraLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, BLOCK_COMMENT=2, BOOLEAN=3, NUMBER=4, PASCALSTRING=5, CSTRING=6, 
		PERCENT=7, ON_OFF=8, WS=9, LET=10, WHEN=11, IF=12, THEN=13, ELSE=14, END=15, 
		RETURN=16, IS=17, IS_NOT=18, IN=19, ANY_IN=20, ALL_IN=21, NOT_IN=22, ANY_NOT_IN=23, 
		ALL_NOT_IN=24, NOT=25, MIN=26, MAX=27, MATCHES=28, LIKE=29, HAS=30, VALUE=31, 
		AND=32, OR=33, EQ=34, PLUS=35, MINUS=36, MULT=37, DIV=38, IDIV=39, LT=40, 
		LE=41, GT=42, GE=43, PLUS_EQ=44, MINUS_EQ=45, LPAREN=46, RPAREN=47, LBRACK=48, 
		RBRACK=49, COMMA=50, DOT=51, IDENTIFIER=52, DIRECTIVE=53, ERROR=54;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "BLOCK_COMMENT", "BOOLEAN", "NUMBER", "PASCALSTRING", "CSTRING", 
		"PERCENT", "ON_OFF", "WS", "LET", "WHEN", "IF", "THEN", "ELSE", "END", 
		"RETURN", "IS", "IS_NOT", "IN", "ANY_IN", "ALL_IN", "NOT_IN", "ANY_NOT_IN", 
		"ALL_NOT_IN", "NOT", "MIN", "MAX", "MATCHES", "LIKE", "HAS", "VALUE", 
		"AND", "OR", "EQ", "PLUS", "MINUS", "MULT", "DIV", "IDIV", "LT", "LE", 
		"GT", "GE", "PLUS_EQ", "MINUS_EQ", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
		"COMMA", "DOT", "IDENTIFIER", "DIRECTIVE", "ERROR"
	};


	public SimpraLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpraLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'%'", null, null, "'let'", 
		"'when'", "'if'", "'then'", "'else'", "'end'", "'return'", "'is'", "'is not'", 
		"'in'", "'any in'", "'all in'", "'not in'", "'any not in'", "'all not in'", 
		"'not'", "'min'", "'max'", "'matches'", "'like'", "'has'", "'value'", 
		"'and'", "'or'", "'='", "'+'", "'-'", "'*'", "'/'", "'//'", "'<'", "'<='", 
		"'>'", "'>='", "'+='", "'-='", "'('", "')'", "'['", "']'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "BLOCK_COMMENT", "BOOLEAN", "NUMBER", "PASCALSTRING", 
		"CSTRING", "PERCENT", "ON_OFF", "WS", "LET", "WHEN", "IF", "THEN", "ELSE", 
		"END", "RETURN", "IS", "IS_NOT", "IN", "ANY_IN", "ALL_IN", "NOT_IN", "ANY_NOT_IN", 
		"ALL_NOT_IN", "NOT", "MIN", "MAX", "MATCHES", "LIKE", "HAS", "VALUE", 
		"AND", "OR", "EQ", "PLUS", "MINUS", "MULT", "DIV", "IDIV", "LT", "LE", 
		"GT", "GE", "PLUS_EQ", "MINUS_EQ", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
		"COMMA", "DOT", "IDENTIFIER", "DIRECTIVE", "ERROR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpraLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SimpraLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,54,382,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,5,0,112,8,0,10,0,
		12,0,115,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,123,8,1,10,1,12,1,126,9,1,1,1,
		1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,142,8,2,1,3,4,
		3,145,8,3,11,3,12,3,146,1,3,1,3,5,3,151,8,3,10,3,12,3,154,9,3,3,3,156,
		8,3,1,4,1,4,5,4,160,8,4,10,4,12,4,163,9,4,1,4,1,4,1,5,1,5,5,5,169,8,5,
		10,5,12,5,172,9,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,183,8,7,1,8,
		4,8,186,8,8,11,8,12,8,187,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
		1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,
		1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,
		1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,
		1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,
		1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,5,51,366,8,
		51,10,51,12,51,369,9,51,1,52,1,52,1,52,5,52,374,8,52,10,52,12,52,377,9,
		52,1,53,1,53,1,53,1,53,1,124,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
		21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
		33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
		45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,1,0,10,2,
		0,10,10,13,13,1,0,48,57,2,0,39,39,92,92,2,0,34,34,92,92,3,0,9,10,13,13,
		32,32,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,36,36,1,0,97,122,
		3,0,48,57,95,95,97,122,393,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
		0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
		19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
		0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
		0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
		0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
		1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
		0,0,0,0,107,1,0,0,0,1,109,1,0,0,0,3,118,1,0,0,0,5,141,1,0,0,0,7,144,1,
		0,0,0,9,157,1,0,0,0,11,166,1,0,0,0,13,175,1,0,0,0,15,182,1,0,0,0,17,185,
		1,0,0,0,19,191,1,0,0,0,21,195,1,0,0,0,23,200,1,0,0,0,25,203,1,0,0,0,27,
		208,1,0,0,0,29,213,1,0,0,0,31,217,1,0,0,0,33,224,1,0,0,0,35,227,1,0,0,
		0,37,234,1,0,0,0,39,237,1,0,0,0,41,244,1,0,0,0,43,251,1,0,0,0,45,258,1,
		0,0,0,47,269,1,0,0,0,49,280,1,0,0,0,51,284,1,0,0,0,53,288,1,0,0,0,55,292,
		1,0,0,0,57,300,1,0,0,0,59,305,1,0,0,0,61,309,1,0,0,0,63,315,1,0,0,0,65,
		319,1,0,0,0,67,322,1,0,0,0,69,324,1,0,0,0,71,326,1,0,0,0,73,328,1,0,0,
		0,75,330,1,0,0,0,77,332,1,0,0,0,79,335,1,0,0,0,81,337,1,0,0,0,83,340,1,
		0,0,0,85,342,1,0,0,0,87,345,1,0,0,0,89,348,1,0,0,0,91,351,1,0,0,0,93,353,
		1,0,0,0,95,355,1,0,0,0,97,357,1,0,0,0,99,359,1,0,0,0,101,361,1,0,0,0,103,
		363,1,0,0,0,105,370,1,0,0,0,107,378,1,0,0,0,109,113,5,35,0,0,110,112,8,
		0,0,0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,
		114,116,1,0,0,0,115,113,1,0,0,0,116,117,6,0,0,0,117,2,1,0,0,0,118,119,
		5,47,0,0,119,120,5,42,0,0,120,124,1,0,0,0,121,123,9,0,0,0,122,121,1,0,
		0,0,123,126,1,0,0,0,124,125,1,0,0,0,124,122,1,0,0,0,125,127,1,0,0,0,126,
		124,1,0,0,0,127,128,5,42,0,0,128,129,5,47,0,0,129,130,1,0,0,0,130,131,
		6,1,0,0,131,4,1,0,0,0,132,133,5,116,0,0,133,134,5,114,0,0,134,135,5,117,
		0,0,135,142,5,101,0,0,136,137,5,102,0,0,137,138,5,97,0,0,138,139,5,108,
		0,0,139,140,5,115,0,0,140,142,5,101,0,0,141,132,1,0,0,0,141,136,1,0,0,
		0,142,6,1,0,0,0,143,145,7,1,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,
		1,0,0,0,146,147,1,0,0,0,147,155,1,0,0,0,148,152,5,46,0,0,149,151,7,1,0,
		0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,
		156,1,0,0,0,154,152,1,0,0,0,155,148,1,0,0,0,155,156,1,0,0,0,156,8,1,0,
		0,0,157,161,5,39,0,0,158,160,8,2,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,
		159,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,0,164,165,5,
		39,0,0,165,10,1,0,0,0,166,170,5,34,0,0,167,169,8,3,0,0,168,167,1,0,0,0,
		169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,1,0,0,0,172,170,
		1,0,0,0,173,174,5,34,0,0,174,12,1,0,0,0,175,176,5,37,0,0,176,14,1,0,0,
		0,177,178,5,111,0,0,178,183,5,110,0,0,179,180,5,111,0,0,180,181,5,102,
		0,0,181,183,5,102,0,0,182,177,1,0,0,0,182,179,1,0,0,0,183,16,1,0,0,0,184,
		186,7,4,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,
		0,0,0,188,189,1,0,0,0,189,190,6,8,0,0,190,18,1,0,0,0,191,192,5,108,0,0,
		192,193,5,101,0,0,193,194,5,116,0,0,194,20,1,0,0,0,195,196,5,119,0,0,196,
		197,5,104,0,0,197,198,5,101,0,0,198,199,5,110,0,0,199,22,1,0,0,0,200,201,
		5,105,0,0,201,202,5,102,0,0,202,24,1,0,0,0,203,204,5,116,0,0,204,205,5,
		104,0,0,205,206,5,101,0,0,206,207,5,110,0,0,207,26,1,0,0,0,208,209,5,101,
		0,0,209,210,5,108,0,0,210,211,5,115,0,0,211,212,5,101,0,0,212,28,1,0,0,
		0,213,214,5,101,0,0,214,215,5,110,0,0,215,216,5,100,0,0,216,30,1,0,0,0,
		217,218,5,114,0,0,218,219,5,101,0,0,219,220,5,116,0,0,220,221,5,117,0,
		0,221,222,5,114,0,0,222,223,5,110,0,0,223,32,1,0,0,0,224,225,5,105,0,0,
		225,226,5,115,0,0,226,34,1,0,0,0,227,228,5,105,0,0,228,229,5,115,0,0,229,
		230,5,32,0,0,230,231,5,110,0,0,231,232,5,111,0,0,232,233,5,116,0,0,233,
		36,1,0,0,0,234,235,5,105,0,0,235,236,5,110,0,0,236,38,1,0,0,0,237,238,
		5,97,0,0,238,239,5,110,0,0,239,240,5,121,0,0,240,241,5,32,0,0,241,242,
		5,105,0,0,242,243,5,110,0,0,243,40,1,0,0,0,244,245,5,97,0,0,245,246,5,
		108,0,0,246,247,5,108,0,0,247,248,5,32,0,0,248,249,5,105,0,0,249,250,5,
		110,0,0,250,42,1,0,0,0,251,252,5,110,0,0,252,253,5,111,0,0,253,254,5,116,
		0,0,254,255,5,32,0,0,255,256,5,105,0,0,256,257,5,110,0,0,257,44,1,0,0,
		0,258,259,5,97,0,0,259,260,5,110,0,0,260,261,5,121,0,0,261,262,5,32,0,
		0,262,263,5,110,0,0,263,264,5,111,0,0,264,265,5,116,0,0,265,266,5,32,0,
		0,266,267,5,105,0,0,267,268,5,110,0,0,268,46,1,0,0,0,269,270,5,97,0,0,
		270,271,5,108,0,0,271,272,5,108,0,0,272,273,5,32,0,0,273,274,5,110,0,0,
		274,275,5,111,0,0,275,276,5,116,0,0,276,277,5,32,0,0,277,278,5,105,0,0,
		278,279,5,110,0,0,279,48,1,0,0,0,280,281,5,110,0,0,281,282,5,111,0,0,282,
		283,5,116,0,0,283,50,1,0,0,0,284,285,5,109,0,0,285,286,5,105,0,0,286,287,
		5,110,0,0,287,52,1,0,0,0,288,289,5,109,0,0,289,290,5,97,0,0,290,291,5,
		120,0,0,291,54,1,0,0,0,292,293,5,109,0,0,293,294,5,97,0,0,294,295,5,116,
		0,0,295,296,5,99,0,0,296,297,5,104,0,0,297,298,5,101,0,0,298,299,5,115,
		0,0,299,56,1,0,0,0,300,301,5,108,0,0,301,302,5,105,0,0,302,303,5,107,0,
		0,303,304,5,101,0,0,304,58,1,0,0,0,305,306,5,104,0,0,306,307,5,97,0,0,
		307,308,5,115,0,0,308,60,1,0,0,0,309,310,5,118,0,0,310,311,5,97,0,0,311,
		312,5,108,0,0,312,313,5,117,0,0,313,314,5,101,0,0,314,62,1,0,0,0,315,316,
		5,97,0,0,316,317,5,110,0,0,317,318,5,100,0,0,318,64,1,0,0,0,319,320,5,
		111,0,0,320,321,5,114,0,0,321,66,1,0,0,0,322,323,5,61,0,0,323,68,1,0,0,
		0,324,325,5,43,0,0,325,70,1,0,0,0,326,327,5,45,0,0,327,72,1,0,0,0,328,
		329,5,42,0,0,329,74,1,0,0,0,330,331,5,47,0,0,331,76,1,0,0,0,332,333,5,
		47,0,0,333,334,5,47,0,0,334,78,1,0,0,0,335,336,5,60,0,0,336,80,1,0,0,0,
		337,338,5,60,0,0,338,339,5,61,0,0,339,82,1,0,0,0,340,341,5,62,0,0,341,
		84,1,0,0,0,342,343,5,62,0,0,343,344,5,61,0,0,344,86,1,0,0,0,345,346,5,
		43,0,0,346,347,5,61,0,0,347,88,1,0,0,0,348,349,5,45,0,0,349,350,5,61,0,
		0,350,90,1,0,0,0,351,352,5,40,0,0,352,92,1,0,0,0,353,354,5,41,0,0,354,
		94,1,0,0,0,355,356,5,91,0,0,356,96,1,0,0,0,357,358,5,93,0,0,358,98,1,0,
		0,0,359,360,5,44,0,0,360,100,1,0,0,0,361,362,5,46,0,0,362,102,1,0,0,0,
		363,367,7,5,0,0,364,366,7,6,0,0,365,364,1,0,0,0,366,369,1,0,0,0,367,365,
		1,0,0,0,367,368,1,0,0,0,368,104,1,0,0,0,369,367,1,0,0,0,370,371,7,7,0,
		0,371,375,7,8,0,0,372,374,7,9,0,0,373,372,1,0,0,0,374,377,1,0,0,0,375,
		373,1,0,0,0,375,376,1,0,0,0,376,106,1,0,0,0,377,375,1,0,0,0,378,379,9,
		0,0,0,379,380,1,0,0,0,380,381,6,53,1,0,381,108,1,0,0,0,13,0,113,124,141,
		146,152,155,161,170,182,187,367,375,2,6,0,0,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
